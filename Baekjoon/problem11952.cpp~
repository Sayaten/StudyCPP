#include <cstdio>
#include <cstring>
#include <queue>
#include <list>
#include <vector>
#include <functional>

using namespace std;

int main()
{
	int n, m, k, s;
	int p, q;

	scanf("%d %d %d %d\n%d %d", &n, &m, &k, &s, &p, &q);

	int deadCity[k + 1];
	for(int i = 0 ; i < k ; ++i) scanf("%d", deadCity + i);

	list< pair<long long, int> > adj[n + 1];

	while(m--)
	{
		int i, j;
		scanf("%d %d", &i, &j);
		adj[i].push_back(make_pair((long long)p, j));
		adj[j].push_back(make_pair((long long)p, i));
	}
	
	for(int i = 0 ; i < k ; ++i)
	{
		list< pair<long long, int> > qu;
		qu.push_back(make_pair(0, deadCity[i]));
		while(!qu.empty())
		{
			int v = qu.front().second;
			long long w = qu.front().first;
			qu.pop_front();
			if(w <= s)
				for(auto &e1 : adj[v]) 
				{
					for(auto &e2 : adj[e1.second])
					{
						if(e2.second == v)
						{
							if(e2.first < (long long)q) e2.first += (w != 0)?(long long)(q - p):(long long)0x7fffffffffffff;
							break;
						}
					}
					if(w + 1 <= s && e1.first < q) qu.push_back(make_pair(w + 1, e1.second));
				}
			
		}
	}
	priority_queue< pair<long long, int>, vector< pair<long long, int> >, greater< pair<long long, int> > > pq;

	pq.push(make_pair(0, 1));
	long long sp[n + 1];
	memset(sp, -1, sizeof(sp));
	while(!pq.empty())
	{
		int v = pq.top().second;
		long long w = pq.top().first;
		pq.pop();
		if(sp[v] != -1) continue;
		sp[v] = w;
		for(auto e : adj[v]) pq.push(make_pair(w + ((e.second != n) ? e.first : 0), e.second));
	}
	printf("%lld\n", sp[n]);
	return 0;
}
